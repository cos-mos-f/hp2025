name: Deploy Server to Lightsail (SSH)

on:
  push:
    branches: ["main"]
    paths:
      - 'apps/server/**'
      - 'packages/shared/**'
      - '.github/workflows/server-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies (all workspaces)
        run: npm ci

      - name: Build shared and server
        run: |
          npm run build -w packages/shared
          npm run build -w apps/server

      - name: Prepare server bundle
        run: |
          mkdir -p bundle
          cp -r apps/server/dist bundle/dist
          cp apps/server/package.json bundle/package.json
          cp apps/server/.env.example bundle/.env.example
          cp -r apps/server/src/db/prisma bundle/prisma
          mkdir -p bundle/data
          # install prod deps only for server
          cd bundle
          npm ci --omit=dev

      - name: Upload bundle as artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-bundle
          path: bundle

      - name: Deploy via SSH and rsync
        uses: easingthemes/ssh-deploy@v5.1.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET || '/var/www/hp2025' }}
          SOURCE: "bundle/"

      - name: Run post-deploy commands
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.REMOTE_TARGET || '/var/www/hp2025' }}
            # prisma migrate deploy (if migrations exist)
            npx prisma migrate deploy || true
            # restart via pm2 if configured, else try systemctl
            if command -v pm2 >/dev/null 2>&1; then
              pm2 startOrReload ecosystem.config.cjs || pm2 restart all || true
            else
              echo "Please restart your service (systemd or other)"
            fi
